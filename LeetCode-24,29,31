class Solution {
/*
24.两两交换链表中的节点
给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。
*/
  public ListNode swapPairs(ListNode head) {
    if(head == null || head.next == null) {
      return head;
    }
    ListNode newHead = head.next;
    head.next = swapPairs(newHead.next);
    newHead.next = head;
    return newHead;
  }
/*
29.两数相除
给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。
整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。
返回被除数 dividend 除以除数 divisor 得到的 商 。
注意：假设我们的环境只能存储 32 位 有符号整数，其数值范围是 [−231,  231 − 1] 。本题中，如果商 严格大于 231 − 1 ，则返回 231 − 1 ；如果商 严格小于 -231 ，则返回 -231 。
*/
  int MIN = Integer.MIN_VALUE, MAX = Integer.MAX_VALUE;
  int LIMIT = -1073741824; // MIN 的一半
  public int divide(int a, int b) {
    if(a == MIN && b == -1) {
      return MAX;
    }
    boolean flag = false;
    if((a < 0 && b > 0) || (a > 0 && b < 0)) {
      flag = true;
    }
    if(a > 0) {
      a = -a;
    }
    if(b > 0) {
      b = -b;
    }
    int ans = 0;
    while(a <= b) {
      int c = b, d = -1;
      while(c >= LIMIT && d >= LIMIT && c >= a - c) {
        c += c; d += d;
      }
      a -= c;
      ans += d;
    }
    return flag ? ans : -ans;
  }
/*
31.下一个排列
整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。
必须 原地 修改，只允许使用额外常数空间。
*/
  public void nextPermutation(int[] nums) {
    int i = nums.length - 2;
    while(i >= 0 && nums[i] >= nums[i + 1]) {
      i--;
    }
    if(i >= 0) {
      int j = nums.length - 1;
      while(j >= 0 && nums[i] >= nums[j]) {
        j--;
      }
      swap(nums, i, j);
    }
    reverse(nums, i + 1);
  }
  public void swap(int[] nums, int i, int j) {
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
  }
  public void reverse(int[] nums, int start) {
    int left = start;
    int right = nums.length - 1;
    while(left < right) {
      swap(nums, left, right);
      left++;
      right--;
    }
  }
}
